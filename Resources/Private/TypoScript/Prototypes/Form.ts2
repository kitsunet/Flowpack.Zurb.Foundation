prototype(Flowpack.Zurb.Foundation:Form) < prototype(Flowpack.Zurb.Foundation:Content) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'form'

	actionUri = ${q(node).property('actionUri') ? q(node).property('actionUri') : '#'}
	methodType = ${q(node).property('methodType') == 'get' ? 'get' : 'post'}

	attributes.class {
		contentcollection = 'neos-contentcollection'
		contentcollection.@if.isBackend = ${node.context.workspace.name != 'live'}
	}
	content = TYPO3.Neos:ContentCollectionRenderer
}


# Abstract prototype for all form elements.
prototype(Flowpack.Zurb.Foundation:FormElementAbstract) < prototype(Flowpack.Zurb.Foundation:Content) {
	@override.inputId = ${q(node).property('customHtmlId') ? q(node).property('customHtmlId') : 'field-'+q(node).property('_identifier')}
	@override.errorState = ${q(node).property('errorState')}

	# Get 'name' attribute. If not provided, set to $inputId
	inputNameAttr = ${q(node).property('inputName') ? q(node).property('inputName') : inputId}

	# These attributes are added to input, select, textarea elements.
	attributes.class.error = ${errorState ? 'error' : null}
	attributes.id          = ${inputId}
	attributes.placeholder = ${q(node).property('inputPlaceholder') ? q(node).property('inputPlaceholder') : null}
	attributes.checked     = ${q(node).property('inputChecked') ? '' : null}
	attributes.required    = ${q(node).property('inputRequired') ? '' : null}
	attributes.readonly    = ${q(node).property('inputReadOnly') ? '' : null}
	attributes.disabled    = ${q(node).property('inputDisabled') ? '' : null}
	attributes.rows        = ${q(node).property('rows') ? q(node).property('rows') : null}

	# These attributes are added to label element.
	extraAttributes.class.error = ${errorState ? 'error' : null}
	extraAttributes.class.labelCssClass = ${q(node).property('labelCssClass')}
	extraAttributes.for = ${inputId}
	extraAttributes.style = ${q(node).property('labelCssCode') ? q(node).property('labelCssCode') : null}
}


# Fieldset with legend.
prototype(Flowpack.Zurb.Foundation:FormFieldset) < prototype(Flowpack.Zurb.Foundation:Content) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formFieldset'

	attributes.class {
		contentcollection = 'neos-contentcollection'
		contentcollection.@if.isBackend = ${node.context.workspace.name != 'live'}
	}

	content = TYPO3.Neos:ContentCollectionRenderer
}


# Label.
prototype(Flowpack.Zurb.Foundation:FormLabel) < prototype(Flowpack.Zurb.Foundation:Content) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formLabel'

	attributes.class.inline = ${q(node).property('labelInlined') ? 'inline' : null}
}


# Text based form input.
prototype(Flowpack.Zurb.Foundation:FormInput) < prototype(Flowpack.Zurb.Foundation:FormElementAbstract) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formInput'
	inputNature = 'textfield'
}


# Pre/postfix.
prototype(Flowpack.Zurb.Foundation:FormInputPrePostfix) < prototype(Flowpack.Zurb.Foundation:Content) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formInputPrePostfix'

	attributes.class.fixType = ${q(node).property('fixType')}

	# Set default tagName to SPAN
	tagName.@process.default = ${value ? value : 'span'}
}


# Checkbox input.
prototype(Flowpack.Zurb.Foundation:FormInputCheckbox) < prototype(Flowpack.Zurb.Foundation:FormElementAbstract) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formInput-checkbox-radio'
	inputNature = 'checkbox'
}


# Radio input.
prototype(Flowpack.Zurb.Foundation:FormInputRadio) < prototype(Flowpack.Zurb.Foundation:FormElementAbstract) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formInput-checkbox-radio'
	inputNature = 'radio'
}


# Select input.
prototype(Flowpack.Zurb.Foundation:FormInputSelect) < prototype(Flowpack.Zurb.Foundation:FormElementAbstract) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formInput'
	inputNature = 'select'

	selectOptions = Flowpack.Zurb.Foundation:ValueOptionsList {
		value = ${q(node).property('selectOptions')}
	}
}


# Textarea input.
prototype(Flowpack.Zurb.Foundation:FormInputTextarea) < prototype(Flowpack.Zurb.Foundation:FormElementAbstract) {
	templatePath = 'resource://Flowpack.Zurb.Foundation/Private/Templates/NodeTypes/Form.html'
	sectionName = 'formInput'
	inputNature = 'textarea'
}
